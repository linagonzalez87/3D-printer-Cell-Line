//Arduino code to control optical sensors, agarose pumps and cell pumps (dual printing)
//this code works with two nozzles; for two cell types 
//this code primes the agarose lines and mixing chambers (~5 mL), adds cells initially (~1 mL)
//then it continously adds agarose and cells as detected by the optical sensors. 
//this code does not implement the tanden sensor to detect reversal of direction 

#define NOT_AN_INTERRUPT -1 //takes care of an error :) using an old version of arduino in an old PC :(
//you don't need this line if using an recent IDE.

//for adding agarose and cells initially

//i, h and u  are used to avg the samples in temperatures

int j = 1; //initial addition of cells 
int k = 1; // priming to continuous filling
volatile int z = 0; //cell input general 
volatile int r = 0; //cell input liquid pump 1 
volatile int q = 0; //cell input liquid pump 2 
volatile int s = 0; //stepper movement detection (left)
volatile int t = 0; //stepper movement detection (right)

volatile int encoderPos = 0;
volatile int tempPos = 0;
volatile  float steinhart;
unsigned long slot_time = 0;
unsigned long last_slot_time = 0;


//LEDs indicators
const int LED1 = 9;  //this LED indicates when solenoid valve #1 is on
const int LED2 = 10; //this LED indicates when solenoid valve #2 is on
const int LED3 = 26; //this led indicates when the cell liquid pump #1 is on 
const int LED4 = 16; //this led indicates when the cell liquid pump #2 is on 
const int LED6 = 14; //this led indicates when tandem slot sensors #1 (LEFT motor) is on 
const int LED7 = 17; //this led indicates when tandem slot sensors #3 (RIGHT motor) is on 

//slot sensors for detecting movement of the motor
const int pin2 = 3; //motor reversal control (LEFT motor)
const int pin4 = 18; //motor reversal control (RIGHT motor)

const int pin5 = 20; //cell input (LEFT motor)
const int pin6 = 21; //cell input (RIGHT motor) //not need with blank with cells 

//solenoid valves 
const int SOLE1 = 5; //agarose control solenoid #1 for dispensing cell-agarose mixture (LEFT)
const int SOLE2 = 6; //agarose control solenoid #2 for dispensing cell-agarose mixture (RIGHT)

//pump and solenoids for cell input
const int PUMP1 = 12; //cell liquid pump #1 
const int SOLE4 = 15; //solenoid valve controlling cell liquid pump #1 
const int PUMP2 = 8; //cell liquid pump #2 
const int SOLE5 = 27; //solenoid valve controlling cell liquid pump #2

long previousMillis = 0;
long interval_1 = 1000; 
long interval_2 = 100; 

int RV = 4;  
int inputPin = A1; 
int readingP = 0; 
int RVP_min = 0;
int RVP_max = 255;
int RVP = 100; 
int TEMP1 = 63;
int TEMP2 = 55;

#define THERMISTORPIN0 A0 //Ambient temperature in the mixing chamber
#define THERMISTORPIN2 A2 //thermistor #3 temperature at the top of mixing chamber (LEFT)
#define THERMISTORPIN3 A3 //thermistor #3 temperature at the top of mixing chamber (RIGHT)

#define THERMISTORNOMINAL 10000 
#define TEMPERATURENOMINAL 25 
#define NUMSAMPLES 5
#define BCOEFFICIENT 3950 
#define SERIESRESISTOR 10000 

int samples[NUMSAMPLES]; 

void setup() { 

  //set-up for serial  
  Serial.begin(9600);

  //set-up interrupts
  pinMode(pin2, INPUT);
  pinMode(pin4, INPUT);
  pinMode(pin5, INPUT);
  pinMode(pin6, INPUT);

  attachInterrupt(digitalPinToInterrupt(pin2), SLOTSENSOR2, CHANGE);
  attachInterrupt(digitalPinToInterrupt(pin4), SLOTSENSOR3, CHANGE);
  attachInterrupt(digitalPinToInterrupt(pin5), SLOTSENSORCELLS_LEFT, RISING);
  attachInterrupt(digitalPinToInterrupt(pin6), SLOTSENSORCELLS_RIGHT, RISING);

  //set-up LED, pump and valves
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED4, OUTPUT);
  pinMode(LED6, OUTPUT);
  pinMode(LED7, OUTPUT);
  
  pinMode(SOLE1,  OUTPUT);
  pinMode(SOLE2,  OUTPUT);
  
  pinMode(PUMP1, OUTPUT);
  pinMode(SOLE4,  OUTPUT);
  
  pinMode(PUMP2, OUTPUT);
  pinMode(SOLE5,  OUTPUT);

  pinMode(RV, OUTPUT); //relief valve
  analogReference(EXTERNAL); //temperature sensor
}

void loop() {

  digitalWrite(SOLE1, LOW); //needs to be closed except for when priming and when motor is moving clockwise
  digitalWrite(SOLE2, HIGH); //needs to be closed except for when priming and when motor is moving clockwise
  analogWrite(RV, RVP_min); //needs to be closed except for when priming and when motor is moving clockwise

 //Taking care of temperatures
 
  uint8_t i; 
  float average0;

  uint8_t h; 
  float average2;

  uint8_t u; 
  float average3;


  // take N samples in a row, with a slight delay 
  for (i=0; i< NUMSAMPLES; i++) { 
    samples[i] = analogRead(THERMISTORPIN0); 
    delay(10); 
  } 

  // take N samples in a row, with a slight delay 
  for (h=0; h< NUMSAMPLES; h++) { 
    samples[h] = analogRead(THERMISTORPIN2); 
    delay(10); 
  } 

    // take N samples in a row, with a slight delay 
  for (u=0; u< NUMSAMPLES; u++) { 
    samples[u] = analogRead(THERMISTORPIN3); 
    delay(10); 
  } 
  

  // average all the samples out
  average0 = 0; 
  for (i=0; i< NUMSAMPLES; i++) { 
    average0 += samples[i]; 
  } 
  average0 /= NUMSAMPLES; 


  // average all the samples out
  average2 = 0; 
  for (h=0; h< NUMSAMPLES; h++) { 
    average2 += samples[h]; 
  } 
  average2 /= NUMSAMPLES; 


   // average all the samples out
  average3 = 0; 
  for (u=0; u< NUMSAMPLES; u++) { 
    average3 += samples[u]; 
  } 
  average3 /= NUMSAMPLES; 


  // convert the value to resistance (ambient)
  average0 = 1023 / average0 - 1; 
  average0 = SERIESRESISTOR / average0; 
  
  float steinhart0;
  steinhart0 = average0 / THERMISTORNOMINAL; // (R/Ro) 
  steinhart0 = log(steinhart0); // ln(R/Ro) 
  steinhart0 /= BCOEFFICIENT; // 1/B * ln(R/Ro) 
  steinhart0 += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To) 
  steinhart0 = 1.0 / steinhart0; // Invert 
  steinhart0 -= 273.15; // convert to C 


  // convert the value to resistance (ambient)
  average2 = 1023 / average2 - 1; 
  average2 = SERIESRESISTOR / average2; 

  float steinhart2;
  steinhart2 = average2 / THERMISTORNOMINAL; // (R/Ro) 
  steinhart2 = log(steinhart2); // ln(R/Ro) 
  steinhart2 /= BCOEFFICIENT; // 1/B * ln(R/Ro) 
  steinhart2 += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To) 
  steinhart2 = 1.0 / steinhart2; // Invert 
  steinhart2 -= 273.15; // convert to C 


  // convert the value to resistance (ambient)
  average3 = 1023 / average3 - 1; 
  average3 = SERIESRESISTOR / average3; 

  float steinhart3;
  steinhart3 = average3 / THERMISTORNOMINAL; // (R/Ro) 
  steinhart3 = log(steinhart3); // ln(R/Ro) 
  steinhart3 /= BCOEFFICIENT; // 1/B * ln(R/Ro) 
  steinhart3 += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To) 
  steinhart3 = 1.0 / steinhart3; // Invert 
  steinhart3 -= 273.15; // convert to C 


  Serial.print("outside"); 
  Serial.print('\n');
  Serial.print("TEMP");
  Serial.print("\t");
  Serial.print(TEMP1);
  Serial.print("\t");
  Serial.print(TEMP2);
  Serial.print("\t");
  Serial.print("Actual temp left extruder");
  Serial.print("\t");
  Serial.print(steinhart2);
  Serial.print('\n');
  Serial.print("Actual temp right extruder");
  Serial.print("\t");
  Serial.print(steinhart3);
  Serial.print('\n');
   Serial.print("Ambient Temp");
  Serial.print("\t");
  Serial.print(steinhart0);
  Serial.print('\n');
  Serial.print('\n');
  Serial.print("k");
  Serial.print("\t");
  Serial.print(k);
  Serial.print('\n');
  Serial.print("\t");
  Serial.print("r");
  Serial.print("\t");
  Serial.print(r);
  Serial.print('\n');
  Serial.print("\t");
  Serial.print("s");
  Serial.print('\t');
  Serial.print(s);
  Serial.print('\n');
  delay(1000); 


  //make sure the relief valve is closed to prime the lines and chamber (do this once) at ~4psi

  if (k == 1) {

    while((steinhart2 < TEMP1) && (steinhart3 < TEMP1)){
      
      digitalWrite(SOLE1, HIGH);
      analogWrite(RV, RVP_max); //priming line and filling printhead
      digitalWrite(LED1, HIGH);
      delay(100);
      digitalWrite(LED1, LOW);

 
 //Taking care of temperatures
 
  uint8_t i; 
  float average0;

  uint8_t h; 
  float average2;

  uint8_t u; 
  float average3;


  // take N samples in a row, with a slight delay 
  for (i=0; i< NUMSAMPLES; i++) { 
    samples[i] = analogRead(THERMISTORPIN0); 
    delay(10); 
  } 

  // take N samples in a row, with a slight delay 
  for (h=0; h< NUMSAMPLES; h++) { 
    samples[h] = analogRead(THERMISTORPIN2); 
    delay(10); 
  } 

    // take N samples in a row, with a slight delay 
  for (u=0; u< NUMSAMPLES; u++) { 
    samples[u] = analogRead(THERMISTORPIN3); 
    delay(10); 
  } 
  

  // average all the samples out
  average0 = 0; 
  for (i=0; i< NUMSAMPLES; i++) { 
    average0 += samples[i]; 
  } 
  average0 /= NUMSAMPLES; 


  // average all the samples out
  average2 = 0; 
  for (h=0; h< NUMSAMPLES; h++) { 
    average2 += samples[h]; 
  } 
  average2 /= NUMSAMPLES; 


   // average all the samples out
  average3 = 0; 
  for (u=0; u< NUMSAMPLES; u++) { 
    average3 += samples[u]; 
  } 
  average3 /= NUMSAMPLES; 


  // convert the value to resistance (ambient)
  average0 = 1023 / average0 - 1; 
  average0 = SERIESRESISTOR / average0; 
  
  float steinhart0;
  steinhart0 = average0 / THERMISTORNOMINAL; // (R/Ro) 
  steinhart0 = log(steinhart0); // ln(R/Ro) 
  steinhart0 /= BCOEFFICIENT; // 1/B * ln(R/Ro) 
  steinhart0 += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To) 
  steinhart0 = 1.0 / steinhart0; // Invert 
  steinhart0 -= 273.15; // convert to C 


  // convert the value to resistance (ambient)
  average2 = 1023 / average2 - 1; 
  average2 = SERIESRESISTOR / average2; 

  float steinhart2;
  steinhart2 = average2 / THERMISTORNOMINAL; // (R/Ro) 
  steinhart2 = log(steinhart2); // ln(R/Ro) 
  steinhart2 /= BCOEFFICIENT; // 1/B * ln(R/Ro) 
  steinhart2 += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To) 
  steinhart2 = 1.0 / steinhart2; // Invert 
  steinhart2 -= 273.15; // convert to C 


  // convert the value to resistance (ambient)
  average3 = 1023 / average3 - 1; 
  average3 = SERIESRESISTOR / average3; 

  float steinhart3;
  steinhart3 = average3 / THERMISTORNOMINAL; // (R/Ro) 
  steinhart3 = log(steinhart3); // ln(R/Ro) 
  steinhart3 /= BCOEFFICIENT; // 1/B * ln(R/Ro) 
  steinhart3 += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To) 
  steinhart3 = 1.0 / steinhart3; // Invert 
  steinhart3 -= 273.15; // convert to C 


  Serial.print("INSIDE"); 
  Serial.print('\n');
  Serial.print("TEMP");
  Serial.print("\t");
  Serial.print(TEMP1);
  Serial.print("\t");
  Serial.print(TEMP2);
  Serial.print("\t");
  Serial.print("Actual temp left extruder");
  Serial.print("\t");
  Serial.print(steinhart2);
  Serial.print('\n');
  Serial.print("Actual temp right extruder");
  Serial.print("\t");
  Serial.print(steinhart3);
  Serial.print('\n');
  Serial.print("Ambient Temp");
  Serial.print("\t");
  Serial.print(steinhart0);
  Serial.print('\n');
  Serial.print('\n');
  Serial.print("k");
  Serial.print("\t");
  Serial.print(k);
  Serial.print('\n');
  Serial.print("\t");
  Serial.print("r");
  Serial.print("\t");
  Serial.print(r);
  Serial.print('\n');
  Serial.print("\t");
  Serial.print("s");
  Serial.print('\t');
  Serial.print(s);
  Serial.print('\n');
  delay(1000); 

 }
    //intitial addition of the agarose and cells; use the thermistor to detect when the chamber is fulled 
    //with some head space, based on the temperature relieve the electronic relief valve when the mixing 
    //chamber is full and add cells to keep agarose greater than 4%.

    //input cells at the beginning to initially dilute agarose; only once
    if (j==1){
      
      digitalWrite(SOLE4, HIGH);
      digitalWrite(PUMP1, HIGH);
      digitalWrite(LED4, HIGH);
      digitalWrite(SOLE5, HIGH);
      digitalWrite(PUMP2, HIGH);
      digitalWrite(LED3, HIGH);
      
      delay(90);// just using delay once at the beginning (using just millis after here)
      
      digitalWrite(SOLE4, LOW);
      digitalWrite(PUMP1, LOW);
      digitalWrite(LED4, LOW);
      digitalWrite(SOLE5, LOW);
      digitalWrite(PUMP2, LOW);
      digitalWrite(LED3, LOW);
      
      j=0; // so that it doesn't go to this inner loop again
    }

    k=0; 
    analogWrite(RV, RVP_min); //relief valve 
    digitalWrite(SOLE1, LOW); //close valve 

    delay(3000); 
  }

  //k=0;
  //switch from initial priming to continous input of agarose and cells; use millis() here instead of delay() 

  if (k==0){  //switching from 1 (priming) to 0 (continous-INTERMITENT)

    if (r>=2){ //wait 3 revolution to input cells 
      digitalWrite(SOLE4, HIGH);
      digitalWrite(PUMP1, HIGH);
      digitalWrite(LED4, HIGH);
      delay(15); //microdelay ???
      digitalWrite(SOLE4, LOW);
      digitalWrite(PUMP1, LOW);
      digitalWrite(LED4, LOW);
      r=0;
    }


   if (q>=2){ //wait 3 revolution to input cells 
      digitalWrite(SOLE5, HIGH);
      digitalWrite(PUMP2, HIGH);
      digitalWrite(LED3, HIGH);
      delay(15); //microdelay ???
      digitalWrite(SOLE5, LOW);
      digitalWrite(PUMP2, LOW);
      digitalWrite(LED3, LOW);
      q=0;
    }

   

    if (steinhart2 > TEMP2) {
         analogWrite(RV, RVP_min); //relief valve 
         digitalWrite(SOLE1, LOW); //close valve 
            }

     if (steinhart3 > TEMP2) {
         analogWrite(RV, RVP_min); //relief valve 
         digitalWrite(SOLE2, LOW); //close valve 
            }
            
    if (steinhart2 < TEMP2) {    
      if (s>=2 || t>=2) {
        //deal with relief valve here for control and open valve with interrupt to make them quick 
         readingP = analogRead(inputPin); 
         Serial.print("reading pressure:");
         Serial.print("\t");
         Serial.println(readingP);
         Serial.println('\n');

         if (readingP > 175){
         RVP = RVP-5;    
          }
         if (readingP < 150){
         RVP =  RVP +5;
        }

        analogWrite(RV, RVP); 
        delay(500);
        analogWrite(RV, RVP_min); 

        Serial.print("in between");
        Serial.print('\n');
        Serial.print(RVP);
        Serial.print('\n');
        digitalWrite(LED3, HIGH);
        delay(100);
        digitalWrite(LED3, LOW);
        s=0; 
        t=0; 
    }
   }
  }
}


void SLOTSENSOR2(){ 
  s++;
   digitalWrite(SOLE1, HIGH); //needs to be on if MakerBot is moving
  }


void SLOTSENSOR3(){ 
  digitalWrite(SOLE2, HIGH); //needs to be on if MakerBot's motor is moving
  t++;
}


void SLOTSENSORCELLS_LEFT(){
  slot_time = millis();
  //check to see if the optical sensor was 
  //called in the last second (debauncing)

  if (slot_time - last_slot_time > 2000){
    r++;
    //    if (steinhart < TEMP1 ){
    //      z++;
    //    }
    //    if (steinhart > TEMP1 && steinhart < TEMP2){
    //      r++;
    //    }
    //    last_slot_time = slot_time; 
  }
}

void SLOTSENSORCELLS_RIGHT(){
  slot_time = millis();
  //check to see if the optical sensor was 
  //called in the last second (debauncing)

  if (slot_time - last_slot_time > 2000){
    q++;
    //    if (steinhart < TEMP1 ){
    //      z++;
    //    }
    //    if (steinhart > TEMP1 && steinhart < TEMP2){
    //      r++;
    //    }
    //    last_slot_time = slot_time; 
  }
}

