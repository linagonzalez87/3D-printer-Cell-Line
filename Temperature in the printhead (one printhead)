//Arduino code to control the temperature in the printhead (only one printhead)

//We measured the ambient temperature here with analog pin A0 and the temperature at the top of the printhead with analog pin A3

#include <PID_v1.h>
#include <Wire.h>
#include <RobotGeekLCD.h>
RobotGeekLCD lcd;

/*Variables for PID*/
unsigned long lastTime;
double Input, Output, Setpoint;
double ITerm, lastInput;
double kp, ki, kd;
int SampleTime = 1000; //1 sec
double outMin, outMax;
bool inAuto = false;
 
#define MANUAL 0
#define AUTOMATIC 1
 
#define DIRECT 0
#define REVERSE 1
int controllerDirection = DIRECT;

//define aggressive and conservative tuning parameters
double aggKp = 4, aggKi = 0.2, aggKd=1;
double consKp = 1, consKi = 0.05, consKd=0.25;

//create object, specify the links and initial tuning parameters 
PID myPID(&Input,&Output, &Setpoint, consKp, consKi, consKd,DIRECT);

/*Variabes for themperature measurement*/
// which analog pin to connect 
#define THERMISTORPIN0 A0 //MIXING CHAMBER
#define THERMISTORPIN1 A1 //PRINTING BOTTOM
#define THERMISTORPIN2 A2 //PRINTING MIDDLE
#define THERMISTORPIN3 A3 //PRINTING TOP

// resistance at 25 degrees C 
#define THERMISTORNOMINAL 10000 
// temp. for nominal resistance (almost always 25 C) 
#define TEMPERATURENOMINAL 25 
// how many samples to take and average, more takes longer 
// but is more 'smooth' 
#define NUMSAMPLES 5 
// The beta coefficient of the thermistor (usually 3000-4000) 
#define BCOEFFICIENT 3950 
// the value of the 'other' resistor 
#define SERIESRESISTOR 10000 

int samples[NUMSAMPLES]; 
int samples1[NUMSAMPLES]; 
int samples2[NUMSAMPLES]; 
int samples3[NUMSAMPLES]; 

int PS = 9; //PWM PIN
int w=1;
unsigned long w_time =0;
unsigned long last_w_time =0;

void setup() { 
Serial.begin(9600); 
pinMode(PS, OUTPUT); // pin to control power supply
analogReference(EXTERNAL); 
lcd.init();
Setpoint =75;

//turn the PID on 
myPID.SetMode(AUTOMATIC);
}

void loop(){
 
//warming up chamber slowly; 
//caveat:heating to 75C without stepping draws
//too much current throught the wire and it will burn it.
//potential fire hazard. 

//if (w==1){ 
//  w_time = millis();
//  if(w_time - last_w_time > 1000){
//     Setpoint = Setpoint+10;
//      }
//     last_w_time = w_time; 
//   if (Setpoint == 75){
//     w=0;
//   }
//  }
   

//reading the temperature with thermistor
uint8_t i; 
float average;
uint8_t j;
float average1;
uint8_t k;
float average2;
uint8_t z;
float average3;

// take N samples in a row, with a slight delay 
for (i=0; i< NUMSAMPLES; i++) { 
samples[i] = analogRead(THERMISTORPIN0); 
delay(10); 
} 

for (j=0; j< NUMSAMPLES; j++) { 
samples1[j] = analogRead(THERMISTORPIN1); 
delay(10); 
} 

for (k=0; k< NUMSAMPLES; k++) { 
samples2[k] = analogRead(THERMISTORPIN2); 
delay(10); 
} 

for (z=0; z< NUMSAMPLES; z++) { 
samples3[z] = analogRead(THERMISTORPIN3); 
delay(10); 
} 

// average all the samples out 
average = 0; 
for (i=0; i< NUMSAMPLES; i++) { 
  average += samples[i]; 
} 
average /= NUMSAMPLES; 

average1 = 0; 
for (j=0; j< NUMSAMPLES; j++) { 
  average1 += samples1[j]; 
} 
average1 /= NUMSAMPLES; 


average2 = 0; 
for (k=0; k< NUMSAMPLES; k++) { 
  average2 += samples2[k]; 
} 
average2 /= NUMSAMPLES; 


average3 = 0; 
for (z=0; z< NUMSAMPLES; z++) { 
  average3 += samples3[z]; 
} 
average3 /= NUMSAMPLES; 



// convert the value to resistance (ambient)
average = 1023 / average - 1; 
average = SERIESRESISTOR / average; 

float steinhart; 
steinhart = average / THERMISTORNOMINAL; // (R/Ro) 
steinhart = log(steinhart); // ln(R/Ro) 
steinhart /= BCOEFFICIENT; // 1/B * ln(R/Ro) 
steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To) 
steinhart = 1.0 / steinhart; // Invert 
steinhart -= 273.15; // convert to C 

// convert the value to resistance (printing chamber bottom)
average1 = 1023 / average1 - 1; 
average1 = SERIESRESISTOR / average1; 

float steinhart1; 
steinhart1 = average1 / THERMISTORNOMINAL; // (R/Ro) 
steinhart1 = log(steinhart1); // ln(R/Ro) 
steinhart1 /= BCOEFFICIENT; // 1/B * ln(R/Ro) 
steinhart1 += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To) 
steinhart1 = 1.0 / steinhart1; // Invert 
steinhart1 -= 273.15; // convert to C 

// convert the value to resistance (printing chamber middle)
average2 = 1023 / average2 - 1; 
average2 = SERIESRESISTOR / average2; 

float steinhart2; 
steinhart2 = average2 / THERMISTORNOMINAL; // (R/Ro) 
steinhart2 = log(steinhart2); // ln(R/Ro) 
steinhart2 /= BCOEFFICIENT; // 1/B * ln(R/Ro) 
steinhart2 += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To) 
steinhart2 = 1.0 / steinhart2; // Invert 
steinhart2 -= 273.15; // convert to C 

// convert the value to resistance (printing chamber top)
average3 = 1023 / average3 - 1; 
average3 = SERIESRESISTOR / average3; 
//average4 = SERIESRESITOR/ AVERAGE 4

float steinhart3; 
steinhart3 = average3 / THERMISTORNOMINAL; // (R/Ro) 
steinhart3 = log(steinhart3); // ln(R/Ro) 
steinhart3 /= BCOEFFICIENT; // 1/B * ln(R/Ro) 
steinhart3 += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To) 
steinhart3 = 1.0 / steinhart3; // Invert 
steinhart3 -= 273.15; // convert to C 

float time; 
time = millis();
time = time/1000;

//output parameters to debug code:
//Serial.print("time: ");
Serial.print(time); 
Serial.print("\t");
//Serial.print('\n'); 
//Serial.print("Setpoint value: "); 
Serial.print(Setpoint); 
Serial.print("\t");
//Serial.print('\n'); 
//Serial.print("Input value: "); 
Serial.print(Input);  
Serial.print("\t");
//Serial.print('\n'); 
//Serial.print("Ouput value: "); 
//Serial.print(Output);  
//Serial.println("\t");
Serial.print(steinhart); 
//Serial.print('\n'); 
//Serial.print(w);
//Serial.print(steinhart2);
//Serial.print(steinhart1);
Serial.print('\n');
delay(1000); 

//start PID feedback here
 Input = (steinhart2 + steinhart1)/2; 
 double gap = abs(Setpoint-Input); //distance away from setpoint
  
  if(gap<1)
  {  //we're close to setpoint, use conservative tuning parameters
    myPID.SetTunings(consKp, consKi, consKd);
  }
  else
  {
     //we're far from setpoint, use aggressive tuning parameters
     myPID.SetTunings(aggKp, aggKi, aggKd);
  }
  
  myPID.Compute();
  analogWrite(PS,Output);

//LCD displayed stuff:

lcd.print("Temp M        C  ");
lcd.setCursor(7,0);
lcd.print(steinhart2);
lcd.setCursor(0,1);
//lcd.print("Duty cycle:       ");
lcd.print("Temp B        C  ");
lcd.setCursor(7,1);
lcd.print(steinhart1);
}
